@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>
<button @onclick="Log">Log</button>
<p>@Message @count</p>
<p>This component demonstrates fetching data from the server.</p>

@code {
    [Inject]
    private ILogger<Index> Logger { get; set; }

    [Inject]
    private HttpClient httpClient { get; set; }

    [Inject] 
    private IApplicationInsights AppInsights { get; set; }

    [CascadingParameter] 
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private int count { get; set; }

    public string Message = string.Empty;
    protected override async Task OnInitializedAsync()
    {
    }



    public async Task Log()
    {
        // authentication
        var user = (await AuthenticationState).User;
        await AppInsights.SetAuthenticatedUserContext(user.FindFirst("preferred_username")?.Value);

        // custom event
        await AppInsights.TrackEvent("Web Event fetching Metrics", new Dictionary<string, object>() { { "customProperty", "customValue" } });
        await AppInsights.Flush();

        var response = await httpClient.GetAsync("api/Metrics");
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }
        Message = content;
        count++;

    }
}
